# [PackageDev] target_format: plist, ext: tmLanguage
name: gap
scopeName: source.gap
fileTypes: [g, gi, gd]
uuid: DDEEA3ED-6B1C-11D9-8B10-000D93589AF6

patterns:
- include: '#comment'

- include: '#pipeline'

- include: '#list'

- include: '#compound-command'

- include: '#loop'

- include: '#function-definition'

- include: '#string'

- include: '#variable'

- include: '#interpolation'

- include: '#heredoc'

- include: '#herestring'

- include: '#redirection'

- include: '#pathname'

- include: '#keyword'

- include: '#support'

repository:
  comment:
    patterns:
    - name: comment.line.number-sign.gap
      match: (#).*\n?
      captures:
        '1': {name: punctuation.definition.comment.gap}

  function-definition:
    patterns:
    - name: variable.parameter.gap
      match: :=
    - name: meta.function.gap
      begin: \s*(function)\s*(\([^\)]*\))
      beginCaptures:
        '1': {name: storage.type.function.gap}
        '2': {name: variable.parameter.gap}
      end: end;
      endCaptures:
        '0': {name: storage.type.function.gap}
      patterns:
      - include: $self

  keyword:
    patterns:
    - name: keyword.control.gap
      match: \b(?:if|then|else|elif|fi|for|in|do|od|end|continue|while|until|return|Error|->)\b
    - name: storage.modifier.gap
      match: (?<![-/])\b(?:local)\b
    - name: keyword.control.gap
      match:  \b(?:Assert|Info|IsBound|QUIT|TryNextMethod|Unbind|mod|quit|rec)\b
    - name: keyword.control.gap
      match: <=?|>=?|=
    - name: keyword.control.gap
      match: \b(?:and|or|not)\b

  list:
    patterns:
    - name: keyword.operator.list.gap
      match: ;|&&|&|\|\|

  loop:
    patterns:
    - name: meta.scope.while-loop.gap
      begin: \b(while|until)\b
      end: \b(od)\b
      captures:
        '1': {name: keyword.control.gap}
      patterns:
      - include: $self
    - name: meta.scope.if-block.gap
      begin: \b(if)\b
      end: \b(fi)\b
      captures:
        '1': {name: keyword.control.gap}
      patterns:
      - include: $self

  string:
    patterns:
    - name: constant.character.escape.gap
      match: \\.
    - name: string.quoted.single.gap
      begin: "'"
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.gap}
      end: "'"
      endCaptures:
        '0': {name: punctuation.definition.string.end.gap}
    - name: string.quoted.double.gap
      begin: \$?"
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.gap}
      end: '"'
      endCaptures:
        '0': {name: punctuation.definition.string.end.gap}
      patterns:
      - name: constant.character.escape.gap
        match: \\[\$`"\\\n]
      - include: '#variable'

  support:
    patterns:
    - name: support.function.declare.gap
      match: (?<![-/])\b(?:DeclareOperation|DeclareGlobalFunction|DeclareGlobalVariable|DeclareAttribute|DeclareProperty|DeclareCategory|DeclareFilter|DeclareRepresentation|DeclareInfoClass|DeclareCategoryCollections|DeclareSynonym)
    - name: support.function.install.gap
      match: (?<![-/])\b(?:InstallMethod|InstallOtherMethod|NewType|Objectify|NewFamily|InstallTrueMethod|InstallGlobalFunction|ObjectifyWithAttributes|BindGlobal|BIND_GLOBAL|InstallValue)

foldingStartMarker: \b(if)\b|(\{|\b(then)\b)$
foldingStopMarker: ^\s*(\}|(od|fi|esac)\b)
keyEquivalent: ^~S
